
# Assumptions:
# - File extensions are .hpp and .cpp
# - A .cpp file does not include another .cpp file
# - All included files should have distinct base names.

# Extension used:
# .hpp : header file
# .cpp : source file
# .d   : dependency file
# .o   : compiled source file
# .p   : fake compiled header file (always empty)
# .ok  : asserts that .p, and .o (if .cpp exists) are both up to date

# Example provided in this folder:
#   main.cpp depends on bas.hpp
#   bas.hpp depends on dep.hpp (and dep.cpp)
#   dep.cpp depends on dep.hpp
#   int.cpp depends on dep.hpp (and dep.cpp)
#   int.cpp depends on int.hpp


####################################################################
# Local make options

# Create a file called "settings.sh" in this folder if you want to 
# configure particular options. See section below for options.

-include settings.sh


####################################################################
# Default compilation options 

# To show all command lines performed by make, VERBOSE_MAKE=1

ifeq ($(VERBOSE_MAKE),)
   VERBOSE_MAKE=0
endif

# To show all dependencies generated, VERBOSE_DEP=1

ifeq ($(VERBOSE_DEP),)
   VERBOSE_DEP=0
endif

# To select an alternative compiler, e.g., COMPILER=llvm

ifeq ($(COMPILER),)
   COMPILER=g++
endif

COMPILER_OPTIONS=

####################################################################
# Modes

# What are the compilation mode supported, i.e. the "modes"
# (If extending the list, need to add cases for the definition
# of COMPILE_OPTIONS_FOR further below, and also for "clean".

MODES:=exe dbg

# Compilation options for each mode

COMPILE_OPTIONS_FOR_exe=-O2 -DNDEBUG
COMPILE_OPTIONS_FOR_dbg=-O0 -g -DDEBUG

# Folders where to find all the header files and main sources

INCLUDES=. inc

# Folders where to find all the source files

FOLDERS=$(INCLUDES) src


####################################################################
# Programs to compile

# Only for this demo 

all: $(addprefix main., $(MODES))


####################################################################
# Makefile parameters

# define recognized suffixes

.SUFFIXES:
.SUFFIXES: .hpp .cpp $(addprefix ., $(MODES)) .o .p .d .ok

# forced target

force:


####################################################################
# Paths of files and folders used

# Where to put obj files --they will be in $(BUILD)/$(MODE)/*.o
BUILD:=_build

BUILD_FOLDERS=$(addprefix $(BUILD)/,$(MODES))

HEADERS=$(wildcard $(addsuffix /*.hpp, $(FOLDERS)))
SOURCES=$(wildcard $(addsuffix /*.cpp, $(FOLDERS)))
HEADERS_AND_SOURCES=$(HEADERS) $(SOURCES)

DEPENDS_FILENAMES=$(addsuffix .d,$(notdir $(HEADERS_AND_SOURCES)))
DEPENDS=$(foreach mode,$(MODES),$(addprefix $(BUILD)/,$(addprefix $(mode),$(addprefix /,$(DEPENDS_FILENAMES)))))

COMPILESH=compile.sh


####################################################################
# Makefile options

ifeq ($(VERBOSE_MAKE),0)
   VERBOSE=@
else
   VERBOSE=
endif

ifeq ($(VERBOSE_DEP),0)
   report_dep=
   report_dep_file=
else
   report_dep=$(if $2,$(info $1 $2),)
   report_dep_file=$(if $(wildcard $2),$(if $(shell cat $2),$(info $1 $(shell cat $2)),))
endif


####################################################################
# Compilation options

INCLUDES_DIRECTIVE=$(addprefix -I ,$(INCLUDES))

# Helper: "compile-script-for $1" returns the content of the compile
# script for mode $1
DOLLAR=$$
compile-script-for=$(COMPILER) $(COMPILE_OPTIONS_FOR_$1) $(COMPILER_OPTIONS) $(INCLUDES_DIRECTIVE) -I $(BUILD)/$1 $(DOLLAR)*


####################################################################
# Generation of build folders

# rules for created build folders,
# and order-only prerequisite rule for performing creation when needed

define generate-build-folder
$(BUILD)/$1/%: | $(BUILD)/$1 
$(BUILD)/$1: 
	$(VERBOSE)mkdir -p $$@
endef
$(foreach mode,$(MODES),$(eval $(call generate-build-folder,$(mode))))

build_folders: $(BUILD_FOLDERS)


####################################################################
# Generation of targets for "compile.sh" scripts

# Rules for generating a compile.sh script in each folder;
# This compile script is used to produce .o and binary files.
# The file $(BUILD)/$(MODE)/compile.sh needs to be regenerated when
# the value of $(call compile-script-for,$(MODE)) changes.
# So, if the file already exists and has up-to-date content,
# we do not generate a creation rule for it

# Helper: "file_exists $1" returns $1 if the file $1 exists, empty otherwise
file_exists=$(shell if [ -f $1 ] ; then echo $1 ; fi)

# Helper: "eq $1 $2" tests whether two (nonempty) strings are equal; 
# returns the string if so, or empty otherwise
eq=$(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))

# Helper: escape dollars occuring in a string to be passed to echo
escape_echo_arg=$(subst $$,\$$$$,$1)

# Helper: "file_has_content $1 $2" returns $2 if file $1 has (nonempty)
# content $2 and returns empty otherwise
file_has_content=$(and $(call file_exists,$1),$(call eq,$(call escape_echo_arg,$2),$(call escape_echo_arg,$(shell cat $1))))

define generate-compile-script
$(BUILD)/$1/$(COMPILESH): force | $(BUILD)/$1 
	$(VERBOSE)echo "$(call escape_echo_arg,$(call compile-script-for,$1))" > $$@
	$(VERBOSE)chmod +x $$@
endef

VERBOSE_COMPILESH=0

$(foreach mode,$(MODES),$(eval \
   $(if $(call file_has_content,$(BUILD)/$(mode)/$(COMPILESH),$(call compile-script-for,$(mode))),\
      $(if $(call eq,$(VERBOSE_COMPILESH),1),$(info $(BUILD)/$(mode)/$(COMPILESH) already up to date),),\
      $(eval $(call generate-compile-script,$(mode))))))

build_compile_scripts: build_folders $(addsuffix /$(COMPILESH),$(BUILD_FOLDERS))


####################################################################
# Generation of .d targets

# See file depend.sh for documentation

DEPEND_SCRIPT=./depend.sh

define generate-dep-rule
$(BUILD)/$1/$(notdir $2).d: $2 | $(BUILD)/$1
	$(VERBOSE)$(DEPEND_SCRIPT) $2 $(BUILD)/$1 > $$@ 
endef
$(foreach mode,$(MODES),$(foreach f,$(HEADERS_AND_SOURCES),$(eval $(call generate-dep-rule,$(mode),$(f)))))

depend: $(DEPENDS) 


####################################################################
# Include all dependency (.d) files

# import .d files, if the goal is not "clean" or "depend", or "test"

define import-dep-files
-include $(BUILD)/$1/$(notdir $2).d
$(call report_dep_file,-->,$(BUILD)/$1/$(notdir $2).d)
endef

ifeq ($(findstring $(MAKECMDGOALS),clean depend test),)
$(foreach mode,$(MODES),$(foreach f,$(HEADERS_AND_SOURCES),$(eval $(call import-dep-files,$(mode),$(f)))))
endif


####################################################################
# Generation of .p targets

# generation of .p targets, by touch;
# note that additional dependencies come from the generated dependency files

define generate-p-rule
$(BUILD)/$1/$(notdir $(basename $2)).p: $2 | $(BUILD)/$1
	$(VERBOSE)touch $$@
endef
$(foreach mode,$(MODES),$(foreach f,$(HEADERS),$(eval $(call generate-p-rule,$(mode),$(f)))))


####################################################################
# Generation of .o targets

# generation of .o targets, by compilation;
# note that additional dependencies come from the generated dependency files

define generate-o-rule
$(call report_dep,~~>,$(BUILD)/$1/$(notdir $(basename $2)).o: $(BUILD)/$1/$(notdir $2).d $2)
$(BUILD)/$1/$(notdir $(basename $2)).o: $(BUILD)/$1/$(notdir $2).d $2 $(BUILD)/$1/$(COMPILESH)
	./$(BUILD)/$1/$(COMPILESH) -o $$@ -c $2
endef
$(foreach mode,$(MODES),$(foreach f,$(SOURCES),$(eval $(call generate-o-rule,$(mode),$(f)))))


####################################################################
# Generation of .ok targets

# compute the %.cpp associated with a %.hpp file named $1, if it exists
cpp_of_hpp=$(wildcard $(dir $1)../src/$(basename $(notdir $1)).cpp)

# compute the $build/$1/%.o associated with a %.hpp file named $2, 
# if the %.cpp exists, empty otherwise
o_of_hpp=$(addprefix $(BUILD)/$1/,$(addsuffix .o,$(basename $(notdir $(call cpp_of_hpp,$2)))))

# compute the $build/$2/%.p associated with an %.hpp file, 
# if the %.cpp exists, empty otherwise
p_of_hpp=$(addprefix $(BUILD)/$1/,$(addsuffix .p,$(basename $(notdir $2))))

# generation of .ok targets : dependency on the *.d file,
# on the .p file, and on the .o file if the corresponding .cpp file exists;
# note that additional dependencies come from the generated dependency files

define generate-ok-rule
$(call report_dep,==>,$(BUILD)/$1/$(notdir $(basename $2)).ok: $(BUILD)/$1/$(notdir $2).d $(call p_of_hpp,$1,$2) $(call o_of_hpp,$1,$2))
$(BUILD)/$1/$(notdir $(basename $2)).ok: $(BUILD)/$1/$(notdir $2).d $(call p_of_hpp,$1,$2) $(call o_of_hpp,$1,$2) | $(BUILD)/$1
	$(VERBOSE)touch $$@
endef
$(foreach mode,$(MODES),$(foreach f,$(HEADERS),$(eval $(call generate-ok-rule,$(mode),$(f)))))


####################################################################
# Generation of .$(mode) targets

# generation of "foo.mode" main programs
# note that additional dependencies come from the generated dependency files

define generate-main-rule
$(notdir $(basename $2)).$1: $2 $(BUILD)/$1/$(notdir $(basename $2)).o $(BUILD)/$1/$(COMPILESH)
	./$(BUILD)/$1/$(COMPILESH) _build/exe/*.o -o $$@ 
endef
$(foreach mode,$(MODES),$(foreach f,$(SOURCES),$(eval $(call generate-main-rule,$(mode),$(f)))))



####################################################################
# Clean


clean_build:
	rm -Rf _build/

# Be careful, this could be dangerous if $(MODES) conflicts with existing extensions!

clean_modes:
	rm -f $(addprefix ./*.,$(MODES))

# Only for this demo
clean: clean_build clean_modes


####################################################################
# Makefile debugging

test_files: 
	@echo goals=$(DEPENDS)
	@echo headers=$(HEADERS)
	@echo sources=$(SOURCES)

test_of_hpp:
	@echo $(call cpp_of_hpp,inc/dep.hpp)
	@echo $(call obj_of_hpp,inc/dep.hpp)
	@echo $(call cpp_of_hpp,inc/bas.hpp)
	@echo $(call obj_of_hpp,inc/bas.hpp)

test_folder: | test_folder_create

test_folder_create:
	mkdir -p test_folder_create

ifeq (0,1) # for debugging generation of compile.sh scripts:
   $(info compile= $(call compile-script-for,exe))
   $(info existsh= $(shell cat _build/exe/compile.sh))
   $(info comparison= $(call eq,$(call compile-script-for,exe),$(shell cat _build/exe/compile.sh)))
   $(info fexists= $(call file_exists,_build/exe/compile.sh))
   $(info contenteq= $(call eq,$(call compile-script-for,exe),$(shell cat _build/exe/compile.sh)))
   $(info compare= $(and $(call file_exists,_build/exe/compile.sh),$(call eq,$(call compile-script-for,exe),$(shell cat _build/exe/compile.sh))))
   $(info hascontent= $(call file_has_content,_build/exe/compile.sh,$(call compile-script-for,exe)))
   $(info escaped= $(call escape_echo_arg,$(call compile-script-for,exe)))
endif
